name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the 'master' branch
  pull_request:
    branches:
      - master  # Trigger the workflow on pull requests to the 'master' branch

jobs:
  sonar-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Run SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
      # Optional step to fail on Quality Gate
      # - name: SonarQube Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  trivy-scan:
    name: Trivy Dockerfile Scan
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: sonar-scan # Ensure this job runs only after the sonar-scan job has finished

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.24.0/trivy_0.24.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.24.0_Linux-64bit.deb

      # Scan Dockerfile for vulnerabilities
      - name: Scan Dockerfile for vulnerabilities
        run: |
          trivy config --exit-code 1 --severity HIGH,CRITICAL ./Dockerfile

  build:
    name: Build
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: [sonar-scan, trivy-scan] # Ensure this job runs only after the sonar-scan and trivy-scan jobs have finished

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Use Node.js version 14

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t pushkal26/first-nodejs:latest .

      # Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push pushkal26/first-nodejs:latest

  terraform:
    name: Run Terraform
    runs-on: ubuntu-latest  # The GitHub Action will run on an Ubuntu runner
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Checkout the repository code

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1  # Setup Terraform in the GitHub Action

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: |
            cd terraform
            terraform init

      - name: Run Terraform Plan
        run: terraform plan

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve  # Apply the configuration without manual approval

      - name: Save Kubeconfig Output
        run: |
          terraform output kubeconfig > ~/.kube/config
          echo "Kubeconfig has been saved!"
          
      - name: Verify kubectl Access
        run: kubectl get svc  # Verify that kubectl can access the EKS cluster
